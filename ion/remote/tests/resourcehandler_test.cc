/**
Copyright 2016 Google Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS-IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/

#if !ION_PRODUCTION

#include "ion/remote/resourcehandler.h"

#include <iomanip>
#include <sstream>
#include <string>
#include <vector>

#include "ion/base/invalid.h"
#include "ion/base/logchecker.h"
#include "ion/base/stringutils.h"
#include "ion/base/tests/multilinestringsequal.h"
#include "ion/base/zipassetmanager.h"
#include "ion/gfx/framebufferobject.h"
#include "ion/gfx/node.h"
#include "ion/gfx/renderer.h"
#include "ion/gfx/tests/mockgraphicsmanager.h"
#include "ion/gfx/tests/testscene.h"
#include "ion/gfx/texture.h"
#include "ion/image/conversionutils.h"
#include "ion/remote/tests/httpservertest.h"

#include "third_party/googletest/googletest/include/gtest/gtest.h"

namespace ion {
namespace remote {

namespace {

using gfx::FramebufferObject;
using gfx::FramebufferObjectPtr;
using gfx::Image;
using gfx::ImagePtr;
using gfx::Node;
using gfx::NodePtr;
using gfx::Renderer;
using gfx::RendererPtr;
using gfx::Texture;
using gfx::TexturePtr;
using gfx::testing::MockGraphicsManager;
using gfx::testing::MockGraphicsManagerPtr;
using gfx::testing::MockVisual;
using gfx::testing::TestScene;

// A string that represents no resources.
static const char kPlatformJson[] =
    "  \"platform\": [\n"
    "    {\n"
    "      \"renderer\": \"Ion fake OpenGL / ES\",\n"
    "      \"vendor\": \"Google\",\n"
    "      \"version_string\": \"3.3 Ion OpenGL / ES\",\n"
    "      \"gl_version\": 3.3,\n"
    "      \"glsl_version\": 110,\n"
    "      \"aliased_line_width_range\": \"1 - 256\",\n"
    "      \"aliased_point_size_range\": \"1 - 8192\",\n"
    "      \"max_combined_texture_image_units\": 32,\n"
    "      \"max_cube_map_texture_size\": 8192,\n"
    "      \"max_fragment_uniform_vectors\": 512,\n"
    "      \"max_renderbuffer_size\": 4096,\n"
    "      \"max_texture_image_units\": 32,\n"
    "      \"max_texture_size\": 8192,\n"
    "      \"max_transform_feedback_buffers\": -1,\n"
    "      \"max_transform_feedback_interleaved_components\": -1,\n"
    "      \"max_transform_feedback_separate_attribs\": -1,\n"
    "      \"max_transform_feedback_separate_components\": -1,\n"
    "      \"max_varying_vectors\": 15,\n"
    "      \"max_vertex_attribs\": 32,\n"
    "      \"max_vertex_texture_image_units\": 32,\n"
    "      \"max_vertex_uniform_vectors\": 1024,\n"
    "      \"max_viewport_dims\": \"8192 x 8192\",\n"
    "      \"transform_feedback_varying_max_length\": -1,\n"
    "      \"compressed_texture_formats\": \"GL_COMPRESSED_RGB_S3TC_DXT1_EXT, "
    "GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG, GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG, "
    "GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG, GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG, "
    "GL_COMPRESSED_RGBA_S3TC_DXT5_EXT, GL_ETC1_RGB8_OES\",\n"
    "      \"shader_binary_formats\": \"0xbadf00d\",\n"
    "      \"extensions\": \"GL_OES_blend_func_separate "
    "GL_OES_blend_subtract GL_OES_compressed_ETC1_RGB8_texture "
    "GL_OES_framebuffer_object GL_OES_texture_cube_map "
    "GL_OES_texture_mirrored_repeat GL_OES_depth24 GL_OES_depth32 "
    "GL_OES_fbo_render_mipmap GL_OES_fragment_precision_high "
    "GL_OES_mapbuffer GL_OES_map_buffer_range GL_OES_rgb8_rgba8 "
    "GL_OES_stencil8 GL_OES_texture_float GL_OES_texture_half_float "
    "GL_EXT_texture_filter_anisotropic GL_EXT_texture_type_2_10_10_10_REV "
    "GL_OES_depth_texture GL_OES_packed_depth_stencil "
    "GL_OES_standard_derivatives GL_EXT_texture_compression_dxt1 "
    "GL_IMG_texture_compression_pvrtc GL_EXT_texture_lod_bias "
    "GL_OES_vertex_array_object GL_EXT_shader_texture_lod "
    "GL_APPLE_texture_max_level GL_EXT_frag_depth "
    "GL_NV_texture_compression_s3tc GL_EXT_debug_label GL_EXT_debug_marker "
    "GL_ARB_debug_output GL_EXT_texture_rg GL_ANGLE_texture_compression_dxt5 "
    "GL_NV_sRGB_formats GL_EXT_texture_compression_s3tc "
    "GL_OES_texture_stencil8 GL_OES_texture_3D "
    "GL_ARB_texture_cube_map_array GL_EXT_texture_storage "
    "GL_EXT_gpu_shader4 GL_ARB_texture_multisample "
    "GL_EXT_framebuffer_multisample GL_EXT_framebuffer_blit "
    "GL_ARB_texture_storage_multisample GL_EXT_draw_instanced GL_ARB_sync "
    "GL_EXT_disjoint_timer_query GL_NV_transform_feedback "
    "GL_ARB_transform_feedback2 GL_ARB_transform_feedback3 "
    "GL_EXT_transform_feedback GL_OES_EGL_image GL_OES_EGL_image_external\"\n"
    "    }\n"
    "  ]";

static const char kNoResourcesJson[] =
    "  \"buffers\": [\n"
    "  ],\n"
    "  \"framebuffers\": [\n"
    "  ],\n"
    "  \"programs\": [\n"
    "  ],\n"
    "  \"samplers\": [\n"
    "  ],\n"
    "  \"shaders\": [\n"
    "  ],\n"
    "  \"textures\": [\n"
    "  ],\n"
    "  \"vertex_arrays\": [\n"
    "  ]";

static const char kBuffersJson[] =
    "  \"buffers\": [\n"
    "    {\n"
    "      \"object_id\": 1,\n"
    "      \"label\": \"\",\n"
    "      \"size\": {vertex_buffer_size},\n"
    "      \"usage\": \"GL_STATIC_DRAW\",\n"
    "      \"mapped_pointer\": \"NULL\",\n"
    "      \"target\": \"GL_ARRAY_BUFFER\"\n"
    "    },\n"
    "    {\n"
    "      \"object_id\": 2,\n"
    "      \"label\": \"Vertex buffer\",\n"
    "      \"size\": {vertex_buffer_size},\n"
    "      \"usage\": \"GL_STATIC_DRAW\",\n"
    "      \"mapped_pointer\": \"NULL\",\n"
    "      \"target\": \"GL_ARRAY_BUFFER\"\n"
    "    },\n"
    "    {\n"
    "      \"object_id\": 3,\n"
    "      \"label\": \"Indices #0\",\n"
    "      \"size\": 24,\n"
    "      \"usage\": \"GL_STATIC_DRAW\",\n"
    "      \"mapped_pointer\": \"NULL\",\n"
    "      \"target\": \"GL_ELEMENT_ARRAY_BUFFER\"\n"
    "    }\n"
    "  ]";

static const char kFramebuffersJson[] =
    "  \"framebuffers\": [\n"
    "    {\n"
    "      \"object_id\": 1,\n"
    "      \"label\": \"\",\n"
    "      \"attachment_color0\": {\n"
    "        \"type\": \"GL_TEXTURE\",\n"
    "        \"texture_glid\": 1,\n"
    "        \"mipmap_level\": 0,\n"
    "        \"cube_face\": \"GL_NONE\",\n"
    "        \"renderbuffer\": {\n"
    "          \"object_id\": 0,\n"
    "          \"label\": \"\",\n"
    "          \"width\": 0,\n"
    "          \"height\": 0,\n"
    "          \"internal_format\": \"GL_RGBA4\",\n"
    "          \"red_size\": 0,\n"
    "          \"green_size\": 0,\n"
    "          \"blue_size\": 0,\n"
    "          \"alpha_size\": 0,\n"
    "          \"depth_size\": 0,\n"
    "          \"stencil_size\": 0\n"
    "        }\n"
    "      },\n"
    "      \"attachment_depth\": {\n"
    "        \"type\": \"GL_RENDERBUFFER\",\n"
    "        \"value\": 1,\n"
    "        \"mipmap_level\": 0,\n"
    "        \"cube_face\": \"GL_NONE\",\n"
    "        \"renderbuffer\": {\n"
    "          \"object_id\": 1,\n"
    "          \"label\": \"\",\n"
    "          \"width\": 2,\n"
    "          \"height\": 2,\n"
    "          \"internal_format\": \"GL_DEPTH_COMPONENT16\",\n"
    "          \"red_size\": 0,\n"
    "          \"green_size\": 0,\n"
    "          \"blue_size\": 0,\n"
    "          \"alpha_size\": 0,\n"
    "          \"depth_size\": 16,\n"
    "          \"stencil_size\": 0\n"
    "        }\n"
    "      },\n"
    "      \"attachment_stencil\": {\n"
    "        \"type\": \"GL_NONE\",\n"
    "        \"value\": 0,\n"
    "        \"mipmap_level\": 0,\n"
    "        \"cube_face\": \"GL_NONE\",\n"
    "        \"renderbuffer\": {\n"
    "          \"object_id\": 0,\n"
    "          \"label\": \"\",\n"
    "          \"width\": 0,\n"
    "          \"height\": 0,\n"
    "          \"internal_format\": \"GL_RGBA4\",\n"
    "          \"red_size\": 0,\n"
    "          \"green_size\": 0,\n"
    "          \"blue_size\": 0,\n"
    "          \"alpha_size\": 0,\n"
    "          \"depth_size\": 0,\n"
    "          \"stencil_size\": 0\n"
    "        }\n"
    "      }\n"
    "    }\n"
    "  ]";

static const char kProgramsJson[] =
    "  \"programs\": [\n"
    "    {\n"
    "      \"object_id\": 1,\n"
    "      \"label\": \"Default Renderer shader\",\n"
    "      \"vertex_shader_glid\": 1,\n"
    "      \"fragment_shader_glid\": 2,\n"
    "      \"delete_status\": \"GL_FALSE\",\n"
    "      \"link_status\": \"GL_TRUE\",\n"
    "      \"validate_status\": \"GL_FALSE\",\n"
    "      \"attributes\": [\n"
    "        {\n"
    "          \"name\": \"aVertex\",\n"
    "          \"index\": 0,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_FLOAT_VEC3\"\n"
    "        }\n"
    "      ],\n"
    "      \"uniforms\": [\n"
    "        {\n"
    "          \"value\": "
    "\"M[1, 2, 3, 4 ; 5, 1, 7, 8 ; 9, 1, 1, 3 ; 4, 5, 6, 1]\",\n"
    "          \"name\": \"uProjectionMatrix\",\n"
    "          \"index\": 0,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_FLOAT_MAT4\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": "
    "\"M[4, 2, 3, 4 ; 5, 4, 7, 8 ; 9, 1, 4, 3 ; 4, 5, 6, 4]\",\n"
    "          \"name\": \"uModelviewMatrix\",\n"
    "          \"index\": 1,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_FLOAT_MAT4\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"V[4, 3, 2, 1]\",\n"
    "          \"name\": \"uBaseColor\",\n"
    "          \"index\": 2,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_FLOAT_VEC4\"\n"
    "        }\n"
    "      ],\n"
    "      \"info_log\": \"\"\n"
    "    },\n"
    "    {\n"
    "      \"object_id\": 2,\n"
    "      \"label\": \"Dummy Shader\",\n"
    "      \"vertex_shader_glid\": 3,\n"
    "      \"fragment_shader_glid\": 4,\n"
    "      \"delete_status\": \"GL_FALSE\",\n"
    "      \"link_status\": \"GL_TRUE\",\n"
    "      \"validate_status\": \"GL_FALSE\",\n"
    "      \"attributes\": [\n"
    "        {\n"
    "          \"name\": \"aFloat\",\n"
    "          \"index\": 0,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_FLOAT\"\n"
    "        },\n"
    "        {\n"
    "          \"name\": \"aFV2\",\n"
    "          \"index\": 1,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_FLOAT_VEC2\"\n"
    "        },\n"
    "        {\n"
    "          \"name\": \"aFV3\",\n"
    "          \"index\": 2,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_FLOAT_VEC3\"\n"
    "        },\n"
    "        {\n"
    "          \"name\": \"aFV4\",\n"
    "          \"index\": 3,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_FLOAT_VEC4\"\n"
    "        },\n"
    // Note that each column of a matrix attribute gets its own index.
    "        {\n"
    "          \"name\": \"aMat2\",\n"
    "          \"index\": 4,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_FLOAT_MAT2\"\n"
    "        },\n"
    "        {\n"
    "          \"name\": \"aMat3\",\n"
    "          \"index\": 6,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_FLOAT_MAT3\"\n"
    "        },\n"
    "        {\n"
    "          \"name\": \"aMat4\",\n"
    "          \"index\": 9,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_FLOAT_MAT4\"\n"
    "        },\n"
    "        {\n"
    "          \"name\": \"aBOE1\",\n"
    "          \"index\": 13,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_FLOAT_VEC2\"\n"
    "        },\n"
    "        {\n"
    "          \"name\": \"aBOE2\",\n"
    "          \"index\": 14,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_FLOAT_VEC3\"\n"
    "        }\n"
    "      ],\n"
    "      \"uniforms\": [\n"
    "        {\n"
    "          \"value\": \"13\",\n"
    "          \"name\": \"uInt\",\n"
    "          \"index\": 0,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_INT\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"1.5\",\n"
    "          \"name\": \"uFloat\",\n"
    "          \"index\": 1,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_FLOAT\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"15\",\n"
    "          \"name\": \"uUint\",\n"
    "          \"index\": 2,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_UNSIGNED_INT\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"1\",\n"
    "          \"name\": \"uCubeMapTex\",\n"
    "          \"index\": 3,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_SAMPLER_CUBE\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"2\",\n"
    "          \"name\": \"uTex\",\n"
    "          \"index\": 4,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_SAMPLER_2D\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"V[2, 3]\",\n"
    "          \"name\": \"uFV2\",\n"
    "          \"index\": 5,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_FLOAT_VEC2\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"V[4, 5, 6]\",\n"
    "          \"name\": \"uFV3\",\n"
    "          \"index\": 6,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_FLOAT_VEC3\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"V[7, 8, 9, 10]\",\n"
    "          \"name\": \"uFV4\",\n"
    "          \"index\": 7,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_FLOAT_VEC4\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"V[2, 3]\",\n"
    "          \"name\": \"uIV2\",\n"
    "          \"index\": 8,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_INT_VEC2\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"V[4, 5, 6]\",\n"
    "          \"name\": \"uIV3\",\n"
    "          \"index\": 9,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_INT_VEC3\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"V[7, 8, 9, 10]\",\n"
    "          \"name\": \"uIV4\",\n"
    "          \"index\": 10,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_INT_VEC4\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"V[2, 3]\",\n"
    "          \"name\": \"uUV2\",\n"
    "          \"index\": 11,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_UNSIGNED_INT_VEC2\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"V[4, 5, 6]\",\n"
    "          \"name\": \"uUV3\",\n"
    "          \"index\": 12,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_UNSIGNED_INT_VEC3\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"V[7, 8, 9, 10]\",\n"
    "          \"name\": \"uUV4\",\n"
    "          \"index\": 13,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_UNSIGNED_INT_VEC4\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"M[1, 2 ; 3, 4]\",\n"
    "          \"name\": \"uMat2\",\n"
    "          \"index\": 14,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_FLOAT_MAT2\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"M[1, 2, 3 ; 4, 5, 6 ; 7, 8, 9]\",\n"
    "          \"name\": \"uMat3\",\n"
    "          \"index\": 15,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_FLOAT_MAT3\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": "
    "\"M[1, 2, 3, 4 ; 5, 6, 7, 8 ; 9, 1, 2, 3 ; 4, 5, 6, 7]\",\n"
    "          \"name\": \"uMat4\",\n"
    "          \"index\": 16,\n"
    "          \"size\": 1,\n"
    "          \"type\": \"GL_FLOAT_MAT4\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"[1, 2]\",\n"
    "          \"name\": \"uIntArray\",\n"
    "          \"index\": 17,\n"
    "          \"size\": 2,\n"
    "          \"type\": \"GL_INT\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"[3, 4]\",\n"
    "          \"name\": \"uUintArray\",\n"
    "          \"index\": 19,\n"
    "          \"size\": 2,\n"
    "          \"type\": \"GL_UNSIGNED_INT\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"[1, 2]\",\n"
    "          \"name\": \"uFloatArray\",\n"
    "          \"index\": 21,\n"
    "          \"size\": 2,\n"
    "          \"type\": \"GL_FLOAT\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"[3, 4]\",\n"
    "          \"name\": \"uCubeMapTexArray\",\n"
    "          \"index\": 23,\n"
    "          \"size\": 2,\n"
    "          \"type\": \"GL_SAMPLER_CUBE\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"[5, 6]\",\n"
    "          \"name\": \"uTexArray\",\n"
    "          \"index\": 25,\n"
    "          \"size\": 2,\n"
    "          \"type\": \"GL_SAMPLER_2D\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"[V[1, 2], V[3, 4]]\",\n"
    "          \"name\": \"uFV2Array\",\n"
    "          \"index\": 27,\n"
    "          \"size\": 2,\n"
    "          \"type\": \"GL_FLOAT_VEC2\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"[V[1, 2, 3], V[4, 5, 6]]\",\n"
    "          \"name\": \"uFV3Array\",\n"
    "          \"index\": 29,\n"
    "          \"size\": 2,\n"
    "          \"type\": \"GL_FLOAT_VEC3\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"[V[1, 2, 3, 4], V[5, 6, 7, 8]]\",\n"
    "          \"name\": \"uFV4Array\",\n"
    "          \"index\": 31,\n"
    "          \"size\": 2,\n"
    "          \"type\": \"GL_FLOAT_VEC4\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"[V[1, 2], V[3, 4]]\",\n"
    "          \"name\": \"uIV2Array\",\n"
    "          \"index\": 33,\n"
    "          \"size\": 2,\n"
    "          \"type\": \"GL_INT_VEC2\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"[V[1, 2, 3], V[4, 5, 6]]\",\n"
    "          \"name\": \"uIV3Array\",\n"
    "          \"index\": 35,\n"
    "          \"size\": 2,\n"
    "          \"type\": \"GL_INT_VEC3\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"[V[1, 2, 3, 4], V[5, 6, 7, 8]]\",\n"
    "          \"name\": \"uIV4Array\",\n"
    "          \"index\": 37,\n"
    "          \"size\": 2,\n"
    "          \"type\": \"GL_INT_VEC4\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"[V[1, 2], V[3, 4]]\",\n"
    "          \"name\": \"uUV2Array\",\n"
    "          \"index\": 39,\n"
    "          \"size\": 2,\n"
    "          \"type\": \"GL_UNSIGNED_INT_VEC2\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"[V[1, 2, 3], V[4, 5, 6]]\",\n"
    "          \"name\": \"uUV3Array\",\n"
    "          \"index\": 41,\n"
    "          \"size\": 2,\n"
    "          \"type\": \"GL_UNSIGNED_INT_VEC3\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"[V[1, 2, 3, 4], V[5, 6, 7, 8]]\",\n"
    "          \"name\": \"uUV4Array\",\n"
    "          \"index\": 43,\n"
    "          \"size\": 2,\n"
    "          \"type\": \"GL_UNSIGNED_INT_VEC4\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"[M[1, 0 ; 0, 1], M[2, 0 ; 0, 2]]\",\n"
    "          \"name\": \"uMat2Array\",\n"
    "          \"index\": 45,\n"
    "          \"size\": 2,\n"
    "          \"type\": \"GL_FLOAT_MAT2\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"[M[1, 0, 0 ; 0, 1, 0 ; 0, 0, 1], M[2, 0, 0 ; 0, 2, "
    "0 ; 0, 0, 2]]\",\n"
    "          \"name\": \"uMat3Array\",\n"
    "          \"index\": 47,\n"
    "          \"size\": 2,\n"
    "          \"type\": \"GL_FLOAT_MAT3\"\n"
    "        },\n"
    "        {\n"
    "          \"value\": \"[M[1, 0, 0, 0 ; 0, 1, 0, 0 ; 0, 0, 1, 0 ; 0, 0, 0, "
    "1], M[2, 0, 0, 0 ; 0, 2, 0, 0 ; 0, 0, 2, 0 ; 0, 0, 0, 2]]\",\n"
    "          \"name\": \"uMat4Array\",\n"
    "          \"index\": 49,\n"
    "          \"size\": 2,\n"
    "          \"type\": \"GL_FLOAT_MAT4\"\n"
    "        }\n"
    "      ],\n"
    "      \"info_log\": \"\"\n"
    "    }\n"
    "  ]";

static const char kSamplersJson[] =
    "  \"samplers\": [\n"
    "    {\n"
    "      \"object_id\": 1,\n"
    "      \"label\": \"Sampler\",\n"
    "      \"compare_function\": \"GL_NEVER\",\n"
    "      \"compare_mode\": \"GL_COMPARE_REF_TO_TEXTURE\",\n"
    "      \"max_anisotropy\": 1,\n"
    "      \"min_lod\": -0.5,\n"
    "      \"max_lod\": 0.5,\n"
    "      \"min_filter\": \"GL_LINEAR_MIPMAP_LINEAR\",\n"
    "      \"mag_filter\": \"GL_NEAREST\",\n"
    "      \"wrap_r\": \"GL_MIRRORED_REPEAT\",\n"
    "      \"wrap_s\": \"GL_MIRRORED_REPEAT\",\n"
    "      \"wrap_t\": \"GL_CLAMP_TO_EDGE\"\n"
    "    },\n"
    "    {\n"
    "      \"object_id\": 2,\n"
    "      \"label\": \"Cubemap Sampler\",\n"
    "      \"compare_function\": \"GL_NEVER\",\n"
    "      \"compare_mode\": \"GL_COMPARE_REF_TO_TEXTURE\",\n"
    "      \"max_anisotropy\": 1,\n"
    "      \"min_lod\": -1.5,\n"
    "      \"max_lod\": 1.5,\n"
    "      \"min_filter\": \"GL_LINEAR_MIPMAP_LINEAR\",\n"
    "      \"mag_filter\": \"GL_NEAREST\",\n"
    "      \"wrap_r\": \"GL_CLAMP_TO_EDGE\",\n"
    "      \"wrap_s\": \"GL_MIRRORED_REPEAT\",\n"
    "      \"wrap_t\": \"GL_CLAMP_TO_EDGE\"\n"
    "    },\n"
    "    {\n"
    "      \"object_id\": 3,\n"
    "      \"label\": \"Sampler\",\n"
    "      \"compare_function\": \"GL_NEVER\",\n"
    "      \"compare_mode\": \"GL_COMPARE_REF_TO_TEXTURE\",\n"
    "      \"max_anisotropy\": 1,\n"
    "      \"min_lod\": -0.5,\n"
    "      \"max_lod\": 0.5,\n"
    "      \"min_filter\": \"GL_LINEAR_MIPMAP_LINEAR\",\n"
    "      \"mag_filter\": \"GL_NEAREST\",\n"
    "      \"wrap_r\": \"GL_MIRRORED_REPEAT\",\n"
    "      \"wrap_s\": \"GL_MIRRORED_REPEAT\",\n"
    "      \"wrap_t\": \"GL_CLAMP_TO_EDGE\"\n"
    "    },\n"
    "    {\n"
    "      \"object_id\": 4,\n"
    "      \"label\": \"Cubemap Sampler\",\n"
    "      \"compare_function\": \"GL_NEVER\",\n"
    "      \"compare_mode\": \"GL_COMPARE_REF_TO_TEXTURE\",\n"
    "      \"max_anisotropy\": 1,\n"
    "      \"min_lod\": -1.5,\n"
    "      \"max_lod\": 1.5,\n"
    "      \"min_filter\": \"GL_LINEAR_MIPMAP_LINEAR\",\n"
    "      \"mag_filter\": \"GL_NEAREST\",\n"
    "      \"wrap_r\": \"GL_CLAMP_TO_EDGE\",\n"
    "      \"wrap_s\": \"GL_MIRRORED_REPEAT\",\n"
    "      \"wrap_t\": \"GL_CLAMP_TO_EDGE\"\n"
    "    },\n"
    "    {\n"
    "      \"object_id\": 5,\n"
    "      \"label\": \"Cubemap Sampler\",\n"
    "      \"compare_function\": \"GL_NEVER\",\n"
    "      \"compare_mode\": \"GL_COMPARE_REF_TO_TEXTURE\",\n"
    "      \"max_anisotropy\": 1,\n"
    "      \"min_lod\": -1.5,\n"
    "      \"max_lod\": 1.5,\n"
    "      \"min_filter\": \"GL_LINEAR_MIPMAP_LINEAR\",\n"
    "      \"mag_filter\": \"GL_NEAREST\",\n"
    "      \"wrap_r\": \"GL_CLAMP_TO_EDGE\",\n"
    "      \"wrap_s\": \"GL_MIRRORED_REPEAT\",\n"
    "      \"wrap_t\": \"GL_CLAMP_TO_EDGE\"\n"
    "    },\n"
    "    {\n"
    "      \"object_id\": 6,\n"
    "      \"label\": \"Sampler\",\n"
    "      \"compare_function\": \"GL_NEVER\",\n"
    "      \"compare_mode\": \"GL_COMPARE_REF_TO_TEXTURE\",\n"
    "      \"max_anisotropy\": 1,\n"
    "      \"min_lod\": -0.5,\n"
    "      \"max_lod\": 0.5,\n"
    "      \"min_filter\": \"GL_LINEAR_MIPMAP_LINEAR\",\n"
    "      \"mag_filter\": \"GL_NEAREST\",\n"
    "      \"wrap_r\": \"GL_MIRRORED_REPEAT\",\n"
    "      \"wrap_s\": \"GL_MIRRORED_REPEAT\",\n"
    "      \"wrap_t\": \"GL_CLAMP_TO_EDGE\"\n"
    "    },\n"
    "    {\n"
    "      \"object_id\": 7,\n"
    "      \"label\": \"Sampler\",\n"
    "      \"compare_function\": \"GL_NEVER\",\n"
    "      \"compare_mode\": \"GL_COMPARE_REF_TO_TEXTURE\",\n"
    "      \"max_anisotropy\": 1,\n"
    "      \"min_lod\": -0.5,\n"
    "      \"max_lod\": 0.5,\n"
    "      \"min_filter\": \"GL_LINEAR_MIPMAP_LINEAR\",\n"
    "      \"mag_filter\": \"GL_NEAREST\",\n"
    "      \"wrap_r\": \"GL_MIRRORED_REPEAT\",\n"
    "      \"wrap_s\": \"GL_MIRRORED_REPEAT\",\n"
    "      \"wrap_t\": \"GL_CLAMP_TO_EDGE\"\n"
    "    }\n"
    "  ]";

static const char kShadersJson[] =
    "  \"shaders\": [\n"
    "    {\n"
    "      \"object_id\": 1,\n"
    "      \"label\": \"Default Renderer vertex shader\",\n"
    "      \"type\": \"GL_VERTEX_SHADER\",\n"
    "      \"delete_status\": \"GL_FALSE\",\n"
    "      \"compile_status\": \"GL_TRUE\",\n"
    "      \"source\": "
    "\"PHByZT48Y29kZT51bmlmb3JtIG1hdDQgdVByb2plY3Rpb25NYXRyaXg7CnVuaWZvcm0gbWF0"
    "NCB1TW9kZWx2aWV3TWF0cml4OwphdHRyaWJ1dGUgdmVjMyBhVmVydGV4OwoKdm9pZCBtYWluKH"
    "ZvaWQpIHsKICBnbF9Qb3NpdGlvbiA9IHVQcm9qZWN0aW9uTWF0cml4ICogdU1vZGVsdmlld01h"
    "dHJpeCAqCiAgICAgIHZlYzQoYVZlcnRleCwgMS4pOwp9CjwvY29kZT48L3ByZT4=\",\n"
    "      \"info_log\": \"\"\n"
    "    },\n"
    "    {\n"
    "      \"object_id\": 2,\n"
    "      \"label\": \"Default Renderer fragment shader\",\n"
    "      \"type\": \"GL_FRAGMENT_SHADER\",\n"
    "      \"delete_status\": \"GL_FALSE\",\n"
    "      \"compile_status\": \"GL_TRUE\",\n"
    "      \"source\": "
    "\"PHByZT48Y29kZT4jaWZkZWYgR0xfRVMKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CiNlbmRp"
    "ZgoKdW5pZm9ybSB2ZWM0IHVCYXNlQ29sb3I7Cgp2b2lkIG1haW4odm9pZCkgewogIGdsX0ZyYW"
    "dDb2xvciA9IHVCYXNlQ29sb3I7Cn0KPC9jb2RlPjwvcHJlPg==\",\n"
    "      \"info_log\": \"\"\n"
    "    },\n"
    "    {\n"
    "      \"object_id\": 3,\n"
    "      \"label\": \"Vertex shader\",\n"
    "      \"type\": \"GL_VERTEX_SHADER\",\n"
    "      \"delete_status\": \"GL_FALSE\",\n"
    "      \"compile_status\": \"GL_TRUE\",\n"
    "      \"source\": "
    "\"PHByZT48Y29kZT5hdHRyaWJ1dGUgZmxvYXQgYUZsb2F0OwphdHRyaWJ1dGUgdmVjMiBhRlYy"
    "OwphdHRyaWJ1dGUgdmVjMyBhRlYzOwphdHRyaWJ1dGUgdmVjNCBhRlY0OwphdHRyaWJ1dGUgbW"
    "F0MiBhTWF0MjsKYXR0cmlidXRlIG1hdDMgYU1hdDM7CmF0dHJpYnV0ZSBtYXQ0IGFNYXQ0Owph"
    "dHRyaWJ1dGUgdmVjMiBhQk9FMTsKYXR0cmlidXRlIHZlYzMgYUJPRTI7CnVuaWZvcm0gaW50IH"
    "VJbnQ7CnVuaWZvcm0gZmxvYXQgdUZsb2F0Owo8L2NvZGU+PC9wcmU+\",\n"
    "      \"info_log\": \"\"\n"
    "    },\n"
    "    {\n"
    "      \"object_id\": 4,\n"
    "      \"label\": \"Fragment shader\",\n"
    "      \"type\": \"GL_FRAGMENT_SHADER\",\n"
    "      \"delete_status\": \"GL_FALSE\",\n"
    "      \"compile_status\": \"GL_TRUE\",\n"
    "      \"source\": "
    "\"PHByZT48Y29kZT51bmlmb3JtIGludCB1SW50Owp1bmlmb3JtIHVpbnQgdVVpbnQ7CnVuaWZv"
    "cm0gZmxvYXQgdUZsb2F0Owp1bmlmb3JtIHNhbXBsZXJDdWJlIHVDdWJlTWFwVGV4Owp1bmlmb3"
    "JtIHNhbXBsZXIyRCB1VGV4Owp1bmlmb3JtIHZlYzIgdUZWMjsKdW5pZm9ybSB2ZWMzIHVGVjM7"
    "CnVuaWZvcm0gdmVjNCB1RlY0Owp1bmlmb3JtIGl2ZWMyIHVJVjI7CnVuaWZvcm0gaXZlYzMgdU"
    "lWMzsKdW5pZm9ybSBpdmVjNCB1SVY0Owp1bmlmb3JtIHV2ZWMyIHVVVjI7CnVuaWZvcm0gdXZl"
    "YzMgdVVWMzsKdW5pZm9ybSB1dmVjNCB1VVY0Owp1bmlmb3JtIG1hdDIgdU1hdDI7CnVuaWZvcm"
    "0gbWF0MyB1TWF0MzsKdW5pZm9ybSBtYXQ0IHVNYXQ0Owp1bmlmb3JtIGludCB1SW50QXJyYXlb"
    "Ml07CnVuaWZvcm0gdWludCB1VWludEFycmF5WzJdOwp1bmlmb3JtIGZsb2F0IHVGbG9hdEFycm"
    "F5WzJdOwp1bmlmb3JtIHNhbXBsZXJDdWJlIHVDdWJlTWFwVGV4QXJyYXlbMl07CnVuaWZvcm0g"
    "c2FtcGxlcjJEIHVUZXhBcnJheVsyXTsKdW5pZm9ybSB2ZWMyIHVGVjJBcnJheVsyXTsKdW5pZm"
    "9ybSB2ZWMzIHVGVjNBcnJheVsyXTsKdW5pZm9ybSB2ZWM0IHVGVjRBcnJheVsyXTsKdW5pZm9y"
    "bSBpdmVjMiB1SVYyQXJyYXlbMl07CnVuaWZvcm0gaXZlYzMgdUlWM0FycmF5WzJdOwp1bmlmb3"
    "JtIGl2ZWM0IHVJVjRBcnJheVsyXTsKdW5pZm9ybSB1dmVjMiB1VVYyQXJyYXlbMl07CnVuaWZv"
    "cm0gdXZlYzMgdVVWM0FycmF5WzJdOwp1bmlmb3JtIHV2ZWM0IHVVVjRBcnJheVsyXTsKdW5pZm"
    "9ybSBtYXQyIHVNYXQyQXJyYXlbMl07CnVuaWZvcm0gbWF0MyB1TWF0M0FycmF5WzJdOwp1bmlm"
    "b3JtIG1hdDQgdU1hdDRBcnJheVsyXTsKPC9jb2RlPjwvcHJlPg==\",\n"
    "      \"info_log\": \"\"\n"
    "    }\n"
    "  ]";

static const char kTexturesJson[] =
    "  \"textures\": [\n"
    "    {\n"
    "      \"object_id\": 1,\n"
    "      \"label\": \"Texture\",\n"
    "      \"width\": 2,\n"
    "      \"height\": 2,\n"
    "      \"format\": \"Rgb888\",\n"
    "      \"sampler_glid\": 1,\n"
    "      \"base_level\": 10,\n"
    "      \"max_level\": 100,\n"
    "      \"compare_function\": \"GL_LESS\",\n"
    "      \"compare_mode\": \"GL_NONE\",\n"
    "      \"max_anisotropy\": 1,\n"
    "      \"min_lod\": -1000,\n"
    "      \"max_lod\": 1000,\n"
    "      \"min_filter\": \"GL_NEAREST_MIPMAP_LINEAR\",\n"
    "      \"mag_filter\": \"GL_LINEAR\",\n"
    "      \"swizzle_red\": \"GL_ALPHA\",\n"
    "      \"swizzle_green\": \"GL_BLUE\",\n"
    "      \"swizzle_blue\": \"GL_GREEN\",\n"
    "      \"swizzle_alpha\": \"GL_RED\",\n"
    "      \"wrap_r\": \"GL_REPEAT\",\n"
    "      \"wrap_s\": \"GL_REPEAT\",\n"
    "      \"wrap_t\": \"GL_REPEAT\",\n"
    "      \"target\": \"GL_TEXTURE_2D\",\n"
    "      \"last_image_unit\": \"GL_TEXTURE{texture_unit1}\"\n"
    "    },\n"
    "    {\n"
    "      \"object_id\": 2,\n"
    "      \"label\": \"Cubemap\",\n"
    "      \"width\": 2,\n"
    "      \"height\": 2,\n"
    "      \"format\": \"Rgb888\",\n"
    "      \"sampler_glid\": 2,\n"
    "      \"base_level\": 10,\n"
    "      \"max_level\": 100,\n"
    "      \"compare_function\": \"GL_LESS\",\n"
    "      \"compare_mode\": \"GL_NONE\",\n"
    "      \"max_anisotropy\": 1,\n"
    "      \"min_lod\": -1000,\n"
    "      \"max_lod\": 1000,\n"
    "      \"min_filter\": \"GL_NEAREST_MIPMAP_LINEAR\",\n"
    "      \"mag_filter\": \"GL_LINEAR\",\n"
    "      \"swizzle_red\": \"GL_ALPHA\",\n"
    "      \"swizzle_green\": \"GL_BLUE\",\n"
    "      \"swizzle_blue\": \"GL_GREEN\",\n"
    "      \"swizzle_alpha\": \"GL_RED\",\n"
    "      \"wrap_r\": \"GL_REPEAT\",\n"
    "      \"wrap_s\": \"GL_REPEAT\",\n"
    "      \"wrap_t\": \"GL_REPEAT\",\n"
    "      \"target\": \"GL_TEXTURE_CUBE_MAP\",\n"
    "      \"last_image_unit\": \"GL_TEXTURE{texture_unit2}\"\n"
    "    },\n"
    "    {\n"
    "      \"object_id\": 3,\n"
    "      \"label\": \"Texture\",\n"
    "      \"width\": 2,\n"
    "      \"height\": 2,\n"
    "      \"format\": \"Rgb888\",\n"
    "      \"sampler_glid\": 3,\n"
    "      \"base_level\": 10,\n"
    "      \"max_level\": 100,\n"
    "      \"compare_function\": \"GL_LESS\",\n"
    "      \"compare_mode\": \"GL_NONE\",\n"
    "      \"max_anisotropy\": 1,\n"
    "      \"min_lod\": -1000,\n"
    "      \"max_lod\": 1000,\n"
    "      \"min_filter\": \"GL_NEAREST_MIPMAP_LINEAR\",\n"
    "      \"mag_filter\": \"GL_LINEAR\",\n"
    "      \"swizzle_red\": \"GL_ALPHA\",\n"
    "      \"swizzle_green\": \"GL_BLUE\",\n"
    "      \"swizzle_blue\": \"GL_GREEN\",\n"
    "      \"swizzle_alpha\": \"GL_RED\",\n"
    "      \"wrap_r\": \"GL_REPEAT\",\n"
    "      \"wrap_s\": \"GL_REPEAT\",\n"
    "      \"wrap_t\": \"GL_REPEAT\",\n"
    "      \"target\": \"GL_TEXTURE_2D\",\n"
    "      \"last_image_unit\": \"GL_TEXTURE{texture_unit3}\"\n"
    "    },\n"
    "    {\n"
    "      \"object_id\": 4,\n"
    "      \"label\": \"Cubemap\",\n"
    "      \"width\": 2,\n"
    "      \"height\": 2,\n"
    "      \"format\": \"Rgb888\",\n"
    "      \"sampler_glid\": 4,\n"
    "      \"base_level\": 10,\n"
    "      \"max_level\": 100,\n"
    "      \"compare_function\": \"GL_LESS\",\n"
    "      \"compare_mode\": \"GL_NONE\",\n"
    "      \"max_anisotropy\": 1,\n"
    "      \"min_lod\": -1000,\n"
    "      \"max_lod\": 1000,\n"
    "      \"min_filter\": \"GL_NEAREST_MIPMAP_LINEAR\",\n"
    "      \"mag_filter\": \"GL_LINEAR\",\n"
    "      \"swizzle_red\": \"GL_ALPHA\",\n"
    "      \"swizzle_green\": \"GL_BLUE\",\n"
    "      \"swizzle_blue\": \"GL_GREEN\",\n"
    "      \"swizzle_alpha\": \"GL_RED\",\n"
    "      \"wrap_r\": \"GL_REPEAT\",\n"
    "      \"wrap_s\": \"GL_REPEAT\",\n"
    "      \"wrap_t\": \"GL_REPEAT\",\n"
    "      \"target\": \"GL_TEXTURE_CUBE_MAP\",\n"
    "      \"last_image_unit\": \"GL_TEXTURE{texture_unit4}\"\n"
    "    },\n"
    "    {\n"
    "      \"object_id\": 5,\n"
    "      \"label\": \"Cubemap\",\n"
    "      \"width\": 2,\n"
    "      \"height\": 2,\n"
    "      \"format\": \"Rgb888\",\n"
    "      \"sampler_glid\": 5,\n"
    "      \"base_level\": 10,\n"
    "      \"max_level\": 100,\n"
    "      \"compare_function\": \"GL_LESS\",\n"
    "      \"compare_mode\": \"GL_NONE\",\n"
    "      \"max_anisotropy\": 1,\n"
    "      \"min_lod\": -1000,\n"
    "      \"max_lod\": 1000,\n"
    "      \"min_filter\": \"GL_NEAREST_MIPMAP_LINEAR\",\n"
    "      \"mag_filter\": \"GL_LINEAR\",\n"
    "      \"swizzle_red\": \"GL_ALPHA\",\n"
    "      \"swizzle_green\": \"GL_BLUE\",\n"
    "      \"swizzle_blue\": \"GL_GREEN\",\n"
    "      \"swizzle_alpha\": \"GL_RED\",\n"
    "      \"wrap_r\": \"GL_REPEAT\",\n"
    "      \"wrap_s\": \"GL_REPEAT\",\n"
    "      \"wrap_t\": \"GL_REPEAT\",\n"
    "      \"target\": \"GL_TEXTURE_CUBE_MAP\",\n"
    "      \"last_image_unit\": \"GL_TEXTURE{texture_unit5}\"\n"
    "    },\n"
    "    {\n"
    "      \"object_id\": 6,\n"
    "      \"label\": \"Texture\",\n"
    "      \"width\": 2,\n"
    "      \"height\": 2,\n"
    "      \"format\": \"Rgb888\",\n"
    "      \"sampler_glid\": 6,\n"
    "      \"base_level\": 10,\n"
    "      \"max_level\": 100,\n"
    "      \"compare_function\": \"GL_LESS\",\n"
    "      \"compare_mode\": \"GL_NONE\",\n"
    "      \"max_anisotropy\": 1,\n"
    "      \"min_lod\": -1000,\n"
    "      \"max_lod\": 1000,\n"
    "      \"min_filter\": \"GL_NEAREST_MIPMAP_LINEAR\",\n"
    "      \"mag_filter\": \"GL_LINEAR\",\n"
    "      \"swizzle_red\": \"GL_ALPHA\",\n"
    "      \"swizzle_green\": \"GL_BLUE\",\n"
    "      \"swizzle_blue\": \"GL_GREEN\",\n"
    "      \"swizzle_alpha\": \"GL_RED\",\n"
    "      \"wrap_r\": \"GL_REPEAT\",\n"
    "      \"wrap_s\": \"GL_REPEAT\",\n"
    "      \"wrap_t\": \"GL_REPEAT\",\n"
    "      \"target\": \"GL_TEXTURE_2D\",\n"
    "      \"last_image_unit\": \"GL_TEXTURE{texture_unit6}\"\n"
    "    },\n"
    "    {\n"
    "      \"object_id\": 7,\n"
    "      \"label\": \"Texture\",\n"
    "      \"width\": 2,\n"
    "      \"height\": 2,\n"
    "      \"format\": \"Rgb888\",\n"
    "      \"sampler_glid\": 7,\n"
    "      \"base_level\": 10,\n"
    "      \"max_level\": 100,\n"
    "      \"compare_function\": \"GL_LESS\",\n"
    "      \"compare_mode\": \"GL_NONE\",\n"
    "      \"max_anisotropy\": 1,\n"
    "      \"min_lod\": -1000,\n"
    "      \"max_lod\": 1000,\n"
    "      \"min_filter\": \"GL_NEAREST_MIPMAP_LINEAR\",\n"
    "      \"mag_filter\": \"GL_LINEAR\",\n"
    "      \"swizzle_red\": \"GL_ALPHA\",\n"
    "      \"swizzle_green\": \"GL_BLUE\",\n"
    "      \"swizzle_blue\": \"GL_GREEN\",\n"
    "      \"swizzle_alpha\": \"GL_RED\",\n"
    "      \"wrap_r\": \"GL_REPEAT\",\n"
    "      \"wrap_s\": \"GL_REPEAT\",\n"
    "      \"wrap_t\": \"GL_REPEAT\",\n"
    "      \"target\": \"GL_TEXTURE_2D\",\n"
    "      \"last_image_unit\": \"GL_TEXTURE{texture_unit7}\"\n"
    "    }\n"
    "  ]";

static const char kVertexArraysJson[] =
    "  \"vertex_arrays\": [\n"
    "    {\n"
    "      \"object_id\": 2,\n"
    "      \"label\": \"\",\n"
    "      \"vertex_count\": 3,\n"
    "      \"attributes\": [\n"
    "        {\n"
    "          \"buffer_glid\": 1,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 3,\n"
    "          \"stride\": {vertex_buffer_stride},\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 1,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[1, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 2,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[1, 2, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 3,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[1, 2, 3, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[1, 2, 3, 4]\"\n"
    "        },\n"

    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 2,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[1, 3, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 2,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[2, 4, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 3,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[1, 4, 7, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 3,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[2, 5, 8, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 3,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[3, 6, 9, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[1, 5, 9, 4]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[2, 6, 1, 5]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[3, 7, 2, 6]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[4, 8, 3, 7]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        }\n"
    "      ]\n"
    "    },\n"
    "    {\n"
    "      \"object_id\": 3,\n"
    "      \"label\": \"Vertex array\",\n"
    "      \"vertex_count\": 3,\n"
    "      \"attributes\": [\n"
    "        {\n"
    "          \"buffer_glid\": 2,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 1,\n"
    "          \"stride\": {vertex_buffer_stride},\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 2,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 2,\n"
    "          \"stride\": {vertex_buffer_stride},\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_TRUE\",\n"
    "          \"pointer_or_offset\": \"{pointer_or_offset}\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 1,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[1, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 2,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[1, 2, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 3,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[1, 2, 3, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[1, 2, 3, 4]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 2,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[1, 3, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 2,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[2, 4, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 3,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[1, 4, 7, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 3,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[2, 5, 8, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 3,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[3, 6, 9, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[1, 5, 9, 4]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[2, 6, 1, 5]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[3, 7, 2, 6]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_TRUE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[4, 8, 3, 7]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        },\n"
    "        {\n"
    "          \"buffer_glid\": 0,\n"
    "          \"enabled\": \"GL_FALSE\",\n"
    "          \"size\": 4,\n"
    "          \"stride\": 0,\n"
    "          \"type\": \"GL_FLOAT\",\n"
    "          \"normalized\": \"GL_FALSE\",\n"
    "          \"pointer_or_offset\": \"NULL\",\n"
    "          \"value\": \"V[0, 0, 0, 1]\"\n"
    "        }\n"
    "      ]\n"
    "    }\n"
    "  ]";

static const char kJoinJson[] = ",\n";
static const char kPrefixJson[] = "{\n";
static const char kSuffixJson[] = "\n}\n";

#if !ION_PRODUCTION
// Returns a string containing a hex representation of a size_t.
static const std::string ToHexString(size_t n) {
  std::ostringstream out;
  out << "0x" << std::hex << n;
  return out.str();
}
#endif

// Returns a PNG representation of a blank 2x3[x3] image.
static const std::string GetTestImagePng() {
  // Since MockGraphicsManager does not actually write data, use an array of
  // zeros.
  static const int kNumBytes = 2 * 2 * 3;
  uint8 pixels[kNumBytes];
  memset(pixels, 0, kNumBytes);
  ImagePtr image(new Image);
  image->Set(Image::kRgb888, 2, 2,
             base::DataContainer::CreateAndCopy<uint8>(pixels, kNumBytes, false,
                                                       image->GetAllocator()));

  const std::vector<uint8> png_data =
      image::ConvertToExternalImageData(image, image::kPng, false);
  return base::MimeBase64EncodeString(
      std::string(png_data.begin(), png_data.end()));
}

static const std::string GetTestCubeMapImagePng() {
  // Since MockGraphicsManager does not actually write data, use an array of
  // zeros.
  static const int kNumBytes = 6 * 8 * 3;
  uint8 pixels[kNumBytes];
  memset(pixels, 0, kNumBytes);
  ImagePtr image(new Image);
  image->Set(Image::kRgb888, 6, 8,
             base::DataContainer::CreateAndCopy<uint8>(pixels, kNumBytes, false,
                                                       image->GetAllocator()));

  const std::vector<uint8> png_data =
      image::ConvertToExternalImageData(image, image::kPng, false);
  return base::MimeBase64EncodeString(
      std::string(png_data.begin(), png_data.end()));
}

//-----------------------------------------------------------------------------
//
// ResourceHandlerTest chassis.
//
//-----------------------------------------------------------------------------
class ResourceHandlerTest : public RemoteServerTest {
 protected:
  void SetUp() override {
    RemoteServerTest::SetUp();
    main_visual_.reset(new MockVisual(800, 800));
    gm_.Reset(new MockGraphicsManager());
    had_visual_ = false;
    renderer_.Reset(new Renderer(gm_));

    server_->SetHeaderHtml("");
    server_->SetFooterHtml("");
    ResourceHandler* rh = new ResourceHandler(renderer_);
    HttpServerTestRequestHandler* test_handler =
        new HttpServerTestRequestHandler(HttpServer::RequestHandlerPtr(rh));
    test_handler->SetPreHandler(
        std::bind(&ResourceHandlerTest::MockVisualSetup, this));
    test_handler->SetPostHandler(
        std::bind(&ResourceHandlerTest::MockVisualTearDown, this));
    server_->RegisterHandler(
        HttpServer::RequestHandlerPtr(test_handler));
  }

  void TearDown() override {
    renderer_.Reset(NULL);
    gm_.Reset(NULL);
    RemoteServerTest::TearDown();
    // The server holds the graphics manager alive, so this needs to be after
    // the parent class tear down.
    main_visual_.reset();
  }

  void MockVisualSetup() {
    // ResourceHandler calls on background threads use OpenGL calls, so there
    // needs to be a MockVisual associated with this thread.
    if (!MockVisual::GetCurrent()) {
      // These tests rely on GL state being shared between the main test thread
      // and the http server thread.  Simulate this by using the same context
      // in both cases.  While MockVisual instances are not thread safe, these
      // tests block the test thread while performing http server thread
      // requests so it should be safe.
      portgfx::Visual::MakeCurrent(main_visual_.get());
      had_visual_ = false;
    } else {
      had_visual_ = true;
    }
  }
  void MockVisualTearDown() {
    if (!had_visual_) {
      portgfx::Visual::MakeCurrent(NULL);
    }
  }

  void DrawScene(const NodePtr& root) {
    renderer_->DrawScene(root);
    // TestScene includes some invalid index buffer types.
    gm_->SetErrorCode(GL_NO_ERROR);
  }

  std::unique_ptr<gfx::testing::MockVisual> main_visual_;
  MockGraphicsManagerPtr gm_;
  RendererPtr renderer_;
  bool had_visual_;
};

}  // anonymous namespace

TEST_F(ResourceHandlerTest, ServeResourceRoot) {
  GetUri("/ion/resources/does/not/exist");
  Verify404(__LINE__);

  GetUri("/ion/resources/index.html");
  const std::string& index = base::ZipAssetManager::GetFileData(
      "ion/resources/index.html");
  EXPECT_FALSE(base::IsInvalidReference(index));
  EXPECT_EQ(200, response_.status);
  EXPECT_EQ(index, response_.data);

  GetUri("/ion/resources/");
  EXPECT_EQ(200, response_.status);
  EXPECT_EQ(index, response_.data);

  GetUri("/ion/resources");
  EXPECT_EQ(200, response_.status);
  EXPECT_EQ(index, response_.data);
}

// Disabled in production builds.
#if !ION_PRODUCTION
TEST_F(ResourceHandlerTest, GetResources) {
  GetUri(
      "/ion/resources/"
      "resources_by_type?types=platform,buffers,framebuffers,programs,samplers,"
      "shaders,textures,vertex_arrays&nonblocking");
  EXPECT_EQ(200, response_.status);
  // There should be no resources without a scene.
  std::vector<std::string> strings;
  strings.push_back(kPrefixJson);
  strings.push_back(kPlatformJson);
  strings.push_back(kJoinJson);
  strings.push_back(kNoResourcesJson);
  strings.push_back(kSuffixJson);
  EXPECT_TRUE(base::testing::MultiLineStringsEqual(
      base::JoinStrings(strings, ""), response_.data));

  // Build and draw a scene to create resources.
  TestScene scene;
  NodePtr root = scene.GetScene();
  TexturePtr tex = scene.CreateTexture();
  FramebufferObjectPtr fbo(new FramebufferObject(2, 2));
  fbo->SetColorAttachment(0U, FramebufferObject::Attachment(tex));
  fbo->SetDepthAttachment(
      FramebufferObject::Attachment(Image::kRenderbufferDepth16));
  renderer_->BindFramebuffer(fbo);
  DrawScene(root);
  renderer_->BindFramebuffer(FramebufferObjectPtr());

  // Invalid label.
  GetUri("/ion/resources/resources_by_type?types=not_a_label&nonblocking");
  EXPECT_EQ(200, response_.status);
  strings.clear();
  strings.push_back(kPrefixJson);
  strings.push_back(kSuffixJson);
  EXPECT_TRUE(base::testing::MultiLineStringsEqual(
      base::JoinStrings(strings, ""), response_.data));

  // Platform only.
  GetUri("/ion/resources/resources_by_type?types=platform&nonblocking");
  EXPECT_EQ(200, response_.status);
  strings.clear();
  strings.push_back(kPrefixJson);
  strings.push_back(kPlatformJson);
  strings.push_back(kSuffixJson);
  EXPECT_TRUE(base::testing::MultiLineStringsEqual(
      base::JoinStrings(strings, ""), response_.data));

  // Buffers and Shaders only.
  GetUri("/ion/resources/resources_by_type?types=buffers,shaders&nonblocking");
  EXPECT_EQ(200, response_.status);
  strings.clear();
  strings.push_back(kPrefixJson);
  strings.push_back(
      base::ReplaceString(kBuffersJson, "{vertex_buffer_size}",
                          base::ValueToString(scene.GetBufferSize())));
  strings.push_back(kJoinJson);
  strings.push_back(kShadersJson);
  strings.push_back(kSuffixJson);
  EXPECT_TRUE(base::testing::MultiLineStringsEqual(
      base::JoinStrings(strings, ""), response_.data));

  // Textures, Framebuffers, invalid, and Samplers.
  GetUri(
      "/ion/resources/"
      "resources_by_type?types=textures,framebuffers,invalid,samplers&"
      "nonblocking");
  EXPECT_EQ(200, response_.status);
  strings.clear();
  strings.push_back(kPrefixJson);
  std::string textures = kTexturesJson;
  static const int kTextureUnits[] = {0, 7, 8, 9, 10, 11, 12};
  for (int i = 0; i < static_cast<int>(arraysize(kTextureUnits)); ++i) {
    textures = base::ReplaceString(
        textures, "{texture_unit" + base::ValueToString(i + 1) + "}",
        base::ValueToString(kTextureUnits[i]));
  }
  strings.push_back(textures);
  strings.push_back(kJoinJson);
  strings.push_back(kFramebuffersJson);
  strings.push_back(kJoinJson);
  strings.push_back(kSamplersJson);
  strings.push_back(kSuffixJson);
  EXPECT_TRUE(base::testing::MultiLineStringsEqual(
      base::JoinStrings(strings, ""), response_.data));

  // All resources.
  GetUri(
      "/ion/resources/"
      "resources_by_type?types=platform,buffers,"
      "framebuffers,programs,samplers,shaders,textures,"
      "vertex_arrays&nonblocking");
  EXPECT_EQ(200, response_.status);
  strings.clear();
  strings.push_back(kPrefixJson);
  strings.push_back(kPlatformJson);
  strings.push_back(kJoinJson);
  strings.push_back(
      base::ReplaceString(kBuffersJson, "{vertex_buffer_size}",
                          base::ValueToString(scene.GetBufferSize())));
  strings.push_back(kJoinJson);
  strings.push_back(kFramebuffersJson);
  strings.push_back(kJoinJson);
  strings.push_back(kProgramsJson);
  strings.push_back(kJoinJson);
  strings.push_back(kSamplersJson);
  strings.push_back(kJoinJson);
  strings.push_back(kShadersJson);
  strings.push_back(kJoinJson);
  strings.push_back(textures);
  strings.push_back(kJoinJson);
  strings.push_back(
      base::ReplaceString(
          base::ReplaceString(kVertexArraysJson, "{vertex_buffer_stride}",
                              base::ValueToString(scene.GetBufferStride())),
          "{pointer_or_offset}",
          ToHexString(TestScene::GetSecondBoeAttributeOffset())));
  strings.push_back(kSuffixJson);
  EXPECT_TRUE(base::testing::MultiLineStringsEqual(
      base::JoinStrings(strings, ""), response_.data));
}
#endif  // ION_PRODUCTION

TEST_F(ResourceHandlerTest, GetBufferData) {
  GetUri("/ion/resources/buffer_data?nonblocking");
  Verify404(__LINE__);
}

TEST_F(ResourceHandlerTest, GetTextureData) {
  GetUri("/ion/resources/texture_data?nonblocking");
  Verify404(__LINE__);

  GetUri("/ion/resources/texture_data?nonblocking&id=-1");
  Verify404(__LINE__);

  GetUri("/ion/resources/texture_data?nonblocking&id=2345345");
  Verify404(__LINE__);

  TestScene scene;
  NodePtr root = scene.GetScene();
  DrawScene(root);
  GetUri("/ion/resources/texture_data?nonblocking&id=2");
  EXPECT_EQ(GetTestImagePng(), response_.data);

  DrawScene(root);
  GetUri("/ion/resources/texture_data?nonblocking&id=1");
  EXPECT_EQ(GetTestCubeMapImagePng(), response_.data);
}

}  // namespace remote
}  // namespace ion

#endif
